#if EI_CONFIG_ETHOS_U55_256
/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 19.04.2022 13:54:16

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace tflite {
namespace ops {
namespace micro {
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 1648;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_ETHOSU,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[6];
TfLiteEvalTensor tflEvalTensors[6];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[1];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,4 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) uint8_t tensor_data1[3172] = { 67, 79, 80, 49, 1, 0, 16, 0, 8, 48, 0, 0, 0, 0, 6, 16, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 2, 0, 17, 3, 48, 1, 0, 0, 48, 64, 0, 0, 192, 5, 0, 0, 49, 1, 1, 0, 49, 64, 0, 0, 144, 1, 0, 0, 50, 64, 0, 0, 224, 1, 0, 0, 16, 0, 0, 0, 15, 1, 1, 0, 0, 64, 0, 0, 112, 3, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 0, 0, 3, 64, 0, 0, 0, 0, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 10, 1, 49, 0, 4, 1, 12, 0, 6, 64, 0, 0, 1, 0, 0, 0, 5, 64, 0, 0, 138, 2, 0, 0, 4, 64, 0, 0, 13, 0, 0, 0, 9, 1, 7, 0, 5, 1, 1, 0, 7, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 3, 1, 0, 0, 2, 1, 1, 0, 31, 1, 1, 0, 16, 64, 0, 0, 0, 0, 0, 0, 17, 64, 0, 0, 0, 0, 0, 0, 18, 64, 0, 0, 0, 0, 0, 0, 19, 64, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 28, 1, 0, 0, 26, 1, 49, 0, 18, 1, 0, 0, 17, 1, 49, 0, 19, 1, 7, 0, 22, 64, 0, 0, 1, 0, 0, 0, 21, 64, 0, 0, 144, 1, 0, 0, 20, 64, 0, 0, 8, 0, 0, 0, 24, 1, 128, 255, 20, 1, 1, 0, 33, 1, 0, 0, 32, 1, 2, 0, 34, 1, 4, 0, 40, 1, 1, 0, 32, 64, 0, 0, 224, 1, 0, 0, 33, 64, 0, 0, 144, 1, 0, 0, 41, 1, 1, 0, 34, 64, 0, 0, 144, 1, 0, 0, 35, 64, 0, 0, 80, 0, 0, 0, 37, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 22, 1, 1, 0, 21, 1, 49, 0, 23, 1, 7, 0, 13, 1, 10, 0, 45, 1, 30, 0, 36, 1, 0, 0, 47, 1, 0, 0, 17, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 11, 1, 49, 0, 12, 1, 49, 0, 10, 1, 0, 0, 4, 1, 7, 0, 5, 64, 0, 0, 8, 0, 0, 0, 4, 64, 0, 0, 8, 0, 0, 0, 9, 1, 128, 255, 1, 1, 0, 0, 2, 1, 0, 0, 16, 64, 0, 0, 144, 1, 0, 0, 27, 1, 24, 0, 28, 1, 24, 0, 26, 1, 0, 0, 18, 1, 24, 0, 17, 1, 0, 0, 21, 64, 0, 0, 8, 0, 0, 0, 33, 1, 1, 0, 32, 1, 0, 0, 34, 1, 2, 0, 22, 1, 7, 0, 21, 1, 1, 0, 5, 0, 0, 0, 48, 64, 0, 0, 160, 7, 0, 0, 49, 64, 0, 0, 96, 2, 0, 0, 50, 64, 0, 0, 96, 2, 0, 0, 18, 0, 1, 0, 16, 0, 0, 0, 0, 64, 0, 0, 144, 1, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 10, 1, 24, 0, 5, 64, 0, 0, 200, 0, 0, 0, 1, 1, 1, 0, 2, 1, 1, 0, 16, 64, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 28, 1, 0, 0, 26, 1, 24, 0, 18, 1, 0, 0, 17, 1, 24, 0, 19, 1, 15, 0, 21, 64, 0, 0, 144, 1, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 33, 1, 0, 0, 32, 1, 2, 0, 34, 1, 4, 0, 32, 64, 0, 0, 0, 3, 0, 0, 33, 64, 0, 0, 192, 1, 0, 0, 34, 64, 0, 0, 96, 2, 0, 0, 35, 64, 0, 0, 160, 0, 0, 0, 22, 1, 1, 0, 21, 1, 25, 0, 23, 1, 15, 0, 17, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 11, 1, 24, 0, 12, 1, 24, 0, 10, 1, 0, 0, 4, 1, 15, 0, 5, 64, 0, 0, 16, 0, 0, 0, 4, 64, 0, 0, 16, 0, 0, 0, 1, 1, 0, 0, 3, 1, 1, 0, 2, 1, 0, 0, 16, 64, 0, 0, 144, 1, 0, 0, 27, 1, 12, 0, 28, 1, 12, 0, 26, 1, 0, 0, 18, 1, 12, 0, 17, 1, 0, 0, 21, 64, 0, 0, 16, 0, 0, 0, 33, 1, 1, 0, 32, 1, 0, 0, 34, 1, 2, 0, 22, 1, 3, 0, 21, 1, 1, 0, 5, 0, 0, 0, 0, 64, 0, 0, 144, 1, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 4, 1, 207, 0, 5, 64, 0, 0, 208, 0, 0, 0, 4, 64, 0, 0, 208, 0, 0, 0, 3, 1, 0, 0, 16, 64, 0, 0, 64, 0, 0, 0, 27, 1, 0, 0, 28, 1, 0, 0, 18, 1, 0, 0, 19, 1, 3, 0, 21, 64, 0, 0, 4, 0, 0, 0, 20, 64, 0, 0, 4, 0, 0, 0, 24, 1, 254, 255, 33, 1, 0, 0, 34, 1, 0, 0, 40, 1, 0, 0, 32, 64, 0, 0, 48, 10, 0, 0, 33, 64, 0, 0, 176, 3, 0, 0, 41, 1, 0, 0, 34, 64, 0, 0, 0, 10, 0, 0, 35, 64, 0, 0, 48, 0, 0, 0, 22, 1, 1, 0, 23, 1, 7, 0, 47, 1, 3, 0, 2, 0, 0, 0, 0, 64, 0, 0, 64, 0, 0, 0, 10, 1, 3, 0, 4, 1, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 1, 0, 0, 0, 9, 1, 254, 255, 16, 64, 0, 0, 80, 0, 0, 0, 19, 1, 0, 0, 22, 64, 0, 0, 16, 0, 0, 0, 21, 64, 0, 0, 16, 0, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 20, 1, 65, 0, 32, 1, 3, 0, 47, 1, 0, 0, 5, 0, 0, 0, 48, 64, 0, 0, 32, 1, 0, 0, 49, 1, 3, 1, 49, 64, 0, 0, 0, 184, 0, 0, 50, 64, 0, 0, 0, 4, 0, 0, 16, 0, 0, 0, 37, 64, 0, 0, 1, 0, 0, 0, 38, 64, 0, 0, 1, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 10, 1, 0, 0, 4, 1, 3, 0, 4, 64, 0, 0, 4, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 19, 1, 3, 0, 22, 64, 0, 0, 64, 0, 0, 0, 21, 64, 0, 0, 64, 0, 0, 0, 20, 64, 0, 0, 64, 0, 0, 0, 24, 1, 127, 0, 20, 1, 69, 1, 37, 1, 16, 48, 13, 1, 46, 0, 45, 1, 46, 0, 141, 1, 10, 0, 143, 1, 1, 0, 128, 64, 0, 0, 80, 0, 0, 0, 129, 64, 0, 0, 0, 0, 0, 0, 130, 64, 0, 0, 0, 0, 0, 0, 131, 64, 0, 0, 0, 0, 0, 0, 139, 1, 0, 0, 140, 1, 0, 0, 138, 1, 0, 0, 134, 64, 0, 0, 16, 0, 0, 0, 133, 64, 0, 0, 16, 0, 0, 0, 132, 64, 0, 0, 16, 0, 0, 0, 137, 1, 254, 255, 133, 1, 65, 0, 128, 1, 4, 0, 17, 0, 0, 0, 6, 0, 2, 0, 0, 64, 0, 0, 0, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 9, 1, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 64, 0, 0, 0, 22, 64, 0, 0, 4, 0, 0, 0, 21, 64, 0, 0, 16, 0, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 24, 1, 254, 255, 20, 1, 5, 128, 37, 1, 0, 0, 38, 1, 126, 255, 39, 1, 125, 0, 141, 1, 18, 0, 143, 1, 0, 0, 128, 64, 0, 0, 32, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 137, 1, 0, 0, 133, 1, 9, 0, 6, 0, 8, 0, 0, 64, 0, 0, 64, 0, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 16, 0, 0, 0, 4, 64, 0, 0, 16, 0, 0, 0, 5, 1, 9, 0, 16, 64, 0, 0, 192, 0, 0, 0, 19, 1, 0, 0, 22, 64, 0, 0, 64, 0, 0, 0, 21, 64, 0, 0, 64, 0, 0, 0, 20, 64, 0, 0, 64, 0, 0, 0, 20, 1, 69, 1, 32, 1, 0, 0, 13, 1, 18, 0, 45, 1, 30, 0, 5, 0, 2, 0, 0, 64, 0, 0, 192, 0, 0, 0, 4, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 0, 1, 0, 0, 20, 1, 69, 0, 13, 1, 46, 0, 45, 1, 46, 0, 6, 0, 7, 0, 15, 1, 0, 0, 0, 64, 0, 0, 48, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 16, 64, 0, 0, 64, 0, 0, 0, 20, 1, 69, 1, 143, 1, 1, 0, 128, 64, 0, 0, 0, 1, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 128, 1, 0, 0, 6, 0, 2, 0, 15, 1, 1, 0, 0, 64, 0, 0, 0, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 128, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 64, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 47, 1, 3, 0, 6, 0, 2, 0, 0, 64, 0, 0, 192, 0, 0, 0, 20, 1, 69, 0, 143, 1, 1, 0, 128, 64, 0, 0, 128, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 47, 1, 0, 0, 6, 0, 9, 0, 0, 64, 0, 0, 128, 0, 0, 0, 20, 1, 69, 1, 143, 1, 0, 0, 128, 64, 0, 0, 80, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 2, 0, 20, 1, 69, 0, 128, 64, 0, 0, 64, 5, 0, 0, 6, 0, 9, 0, 36, 64, 1, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 96, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 24, 1, 0, 0, 20, 1, 69, 1, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 128, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 128, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 0, 1, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 112, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 128, 64, 0, 0, 128, 5, 0, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 16, 64, 0, 0, 192, 0, 0, 0, 143, 1, 1, 0, 128, 64, 0, 0, 128, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 144, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 192, 0, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 0, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 192, 0, 0, 0, 24, 1, 254, 255, 38, 1, 126, 255, 39, 1, 125, 0, 143, 1, 0, 0, 128, 64, 0, 0, 160, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 24, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 192, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 192, 0, 0, 0, 16, 64, 0, 0, 0, 1, 0, 0, 128, 64, 0, 0, 128, 0, 0, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 144, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 0, 1, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 192, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 24, 1, 254, 255, 38, 1, 126, 255, 39, 1, 125, 0, 143, 1, 0, 0, 128, 64, 0, 0, 160, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 192, 0, 0, 0, 24, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 0, 1, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 1, 0, 0, 16, 64, 0, 0, 192, 0, 0, 0, 128, 64, 0, 0, 128, 0, 0, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 144, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 192, 0, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 0, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 192, 0, 0, 0, 24, 1, 254, 255, 38, 1, 126, 255, 39, 1, 125, 0, 143, 1, 0, 0, 128, 64, 0, 0, 160, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 24, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 192, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 0, 64, 0, 0, 192, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 176, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 16, 64, 0, 0, 128, 0, 0, 0, 19, 1, 3, 0, 143, 1, 1, 0, 128, 64, 0, 0, 192, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 128, 1, 4, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 128, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 22, 64, 0, 0, 1, 0, 0, 0, 21, 64, 0, 0, 4, 0, 0, 0, 20, 64, 0, 0, 4, 0, 0, 0, 24, 1, 128, 255, 20, 1, 1, 128, 128, 64, 0, 0, 64, 0, 0, 0, 6, 0, 8, 0, 0, 0, 255, 255, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3172 } };
const ALIGN(16) uint8_t tensor_data2[3552] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 21, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 26, 0, 0, 0, 28, 0, 0, 0, 31, 0, 0, 0, 33, 0, 0, 0, 36, 0, 0, 0, 39, 0, 0, 0, 42, 0, 0, 0, 45, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 56, 0, 0, 0, 61, 0, 0, 0, 66, 0, 0, 0, 71, 0, 0, 0, 76, 0, 0, 0, 83, 0, 0, 0, 89, 0, 0, 0, 96, 0, 0, 0, 104, 0, 0, 0, 112, 0, 0, 0, 121, 0, 0, 0, 130, 0, 0, 0, 141, 0, 0, 0, 152, 0, 0, 0, 164, 0, 0, 0, 177, 0, 0, 0, 191, 0, 0, 0, 206, 0, 0, 0, 222, 0, 0, 0, 240, 0, 0, 0, 3, 1, 0, 0, 23, 1, 0, 0, 45, 1, 0, 0, 69, 1, 0, 0, 95, 1, 0, 0, 123, 1, 0, 0, 153, 1, 0, 0, 185, 1, 0, 0, 220, 1, 0, 0, 2, 2, 0, 0, 42, 2, 0, 0, 86, 2, 0, 0, 133, 2, 0, 0, 185, 2, 0, 0, 240, 2, 0, 0, 43, 3, 0, 0, 108, 3, 0, 0, 177, 3, 0, 0, 252, 3, 0, 0, 77, 4, 0, 0, 164, 4, 0, 0, 2, 5, 0, 0, 103, 5, 0, 0, 213, 5, 0, 0, 75, 6, 0, 0, 203, 6, 0, 0, 85, 7, 0, 0, 233, 7, 0, 0, 138, 8, 0, 0, 55, 9, 0, 0, 242, 9, 0, 0, 187, 10, 0, 0, 149, 11, 0, 0, 128, 12, 0, 0, 125, 13, 0, 0, 143, 14, 0, 0, 182, 15, 0, 0, 244, 16, 0, 0, 76, 18, 0, 0, 191, 19, 0, 0, 80, 21, 0, 0, 0, 23, 0, 0, 210, 24, 0, 0, 202, 26, 0, 0, 233, 28, 0, 0, 51, 31, 0, 0, 172, 33, 0, 0, 87, 36, 0, 0, 55, 39, 0, 0, 83, 42, 0, 0, 173, 45, 0, 0, 75, 49, 0, 0, 51, 53, 0, 0, 106, 57, 0, 0, 246, 61, 0, 0, 222, 66, 0, 0, 42, 72, 0, 0, 226, 77, 0, 0, 13, 84, 0, 0, 181, 90, 0, 0, 229, 97, 0, 0, 166, 105, 0, 0, 4, 114, 0, 0, 12, 123, 0, 0, 204, 132, 0, 0, 80, 143, 0, 0, 171, 154, 0, 0, 235, 166, 0, 0, 36, 180, 0, 0, 105, 194, 0, 0, 207, 209, 0, 0, 110, 226, 0, 0, 93, 244, 0, 0, 185, 7, 1, 0, 157, 28, 1, 0, 40, 51, 1, 0, 125, 75, 1, 0, 191, 101, 1, 0, 21, 130, 1, 0, 170, 160, 1, 0, 172, 193, 1, 0, 74, 229, 1, 0, 187, 11, 2, 0, 55, 53, 2, 0, 253, 97, 2, 0, 79, 146, 2, 0, 116, 198, 2, 0, 187, 254, 2, 0, 119, 59, 3, 0, 3, 125, 3, 0, 192, 195, 3, 0, 23, 16, 4, 0, 122, 98, 4, 0, 100, 187, 4, 0, 89, 27, 5, 0, 232, 130, 5, 0, 171, 242, 5, 0, 72, 107, 6, 0, 115, 237, 6, 0, 238, 121, 7, 0, 138, 17, 8, 0, 39, 181, 8, 0, 187, 101, 9, 0, 75, 36, 10, 0, 244, 241, 10, 0, 230, 207, 11, 0, 110, 191, 12, 0, 239, 193, 13, 0, 235, 216, 14, 0, 255, 5, 16, 0, 237, 74, 17, 0, 152, 169, 18, 0, 10, 36, 20, 0, 118, 188, 21, 0, 60, 117, 23, 0, 237, 80, 25, 0, 75, 82, 27, 0, 84, 124, 29, 0, 64, 210, 31, 0, 137, 87, 34, 0, 239, 15, 37, 0, 127, 255, 39, 0, 152, 42, 43, 0, 240, 149, 46, 0, 159, 70, 50, 0, 34, 66, 54, 0, 103, 142, 58, 0, 212, 49, 63, 0, 81, 51, 68, 0, 80, 154, 73, 0, 219, 110, 79, 0, 162, 185, 85, 0, 0, 132, 92, 0, 17, 216, 99, 0, 190, 192, 107, 0, 204, 73, 116, 0, 239, 127, 125, 0, 223, 112, 135, 0, 100, 43, 146, 0, 120, 191, 157, 0, 87, 62, 170, 0, 156, 186, 183, 0, 86, 72, 198, 0, 47, 253, 213, 0, 138, 240, 230, 0, 159, 59, 249, 0, 169, 249, 12, 1, 13, 72, 34, 1, 124, 70, 57, 1, 52, 23, 82, 1, 41, 223, 108, 1, 37, 198, 137, 1, 63, 247, 168, 1, 219, 160, 202, 1, 29, 245, 238, 1, 12, 42, 22, 2, 9, 122, 64, 2, 16, 36, 110, 2, 18, 108, 159, 2, 109, 155, 212, 2, 83, 1, 14, 3, 24, 243, 75, 3, 8, 205, 142, 3, 143, 242, 214, 3, 51, 207, 36, 4, 178, 214, 120, 4, 41, 134, 211, 4, 160, 100, 53, 5, 174, 3, 159, 5, 143, 0, 17, 6, 252, 4, 140, 6, 234, 199, 16, 7, 19, 15, 160, 7, 204, 175, 58, 8, 226, 143, 225, 8, 12, 168, 149, 9, 43, 4, 88, 10, 193, 197, 41, 11, 197, 36, 12, 12, 48, 114, 0, 13, 202, 25, 8, 14, 191, 163, 36, 15, 190, 183, 87, 16, 241, 30, 163, 17, 41, 198, 8, 19, 38, 194, 138, 20, 1, 81, 43, 22, 147, 223, 236, 23, 34, 10, 210, 25, 236, 162, 221, 27, 196, 181, 18, 30, 33, 139, 116, 32, 244, 174, 6, 35, 10, 245, 204, 37, 246, 125, 203, 40, 25, 191, 6, 44, 77, 136, 131, 47, 114, 8, 71, 51, 135, 219, 86, 55, 250, 11, 185, 59, 213, 33, 116, 64, 213, 37, 143, 69, 220, 177, 17, 75, 30, 250, 3, 81, 62, 215, 110, 87, 6, 215, 91, 94, 92, 73, 213, 101, 155, 75, 230, 109, 198, 225, 154, 118, 255, 255, 255, 127, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 195, 195, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 90, 90, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 118, 54, 140, 85, 37, 69, 228, 255, 255, 255, 3, 21, 119, 67, 38, 36, 226, 255, 255, 255, 63, 191, 138, 74, 38, 230, 252, 255, 255, 255, 148, 46, 62, 102, 37, 72, 234, 255, 255, 255, 23, 14, 91, 82, 38, 206, 241, 255, 255, 255, 128, 90, 131, 80, 38, 63, 229, 255, 255, 255, 245, 220, 232, 124, 39, 181, 250, 255, 255, 255, 67, 170, 208, 71, 37, 152, 9, 84, 241, 93, 48, 144, 96, 48, 33, 1, 129, 32, 48, 18, 116, 81, 65, 241, 176, 240, 239, 143, 101, 51, 115, 66, 18, 2, 162, 145, 17, 225, 208, 192, 64, 0, 224, 0, 176, 251, 249, 14, 21, 0, 152, 133, 30, 244, 186, 2, 192, 255, 204, 84, 124, 247, 238, 205, 243, 129, 139, 18, 245, 62, 0, 32, 22, 104, 145, 183, 231, 152, 109, 251, 231, 23, 4, 168, 31, 177, 198, 203, 214, 199, 214, 37, 176, 234, 212, 0, 240, 143, 2, 202, 137, 187, 194, 23, 40, 233, 14, 132, 0, 240, 181, 185, 173, 80, 182, 7, 16, 254, 178, 66, 239, 16, 72, 124, 178, 234, 31, 82, 125, 122, 206, 0, 0, 167, 84, 87, 167, 242, 253, 253, 236, 178, 117, 159, 222, 141, 101, 0, 240, 152, 198, 174, 215, 174, 142, 189, 225, 74, 1, 207, 21, 0, 254, 244, 98, 219, 164, 57, 3, 197, 34, 182, 26, 0, 34, 142, 38, 164, 36, 114, 31, 225, 206, 15, 0, 208, 183, 33, 41, 94, 149, 216, 222, 55, 141, 105, 180, 67, 185, 5, 0, 154, 170, 96, 23, 120, 14, 0, 95, 8, 24, 224, 88, 23, 243, 194, 125, 238, 191, 233, 229, 167, 1, 64, 53, 120, 213, 44, 249, 247, 245, 141, 136, 72, 221, 247, 222, 3, 128, 125, 222, 121, 52, 9, 61, 96, 161, 85, 20, 254, 95, 217, 2, 210, 154, 8, 253, 255, 23, 114, 242, 229, 172, 51, 33, 255, 255, 255, 255, 255, 224, 224, 240, 225, 163, 104, 233, 224, 31, 83, 138, 64, 8, 28, 28, 42, 48, 218, 74, 100, 105, 46, 16, 58, 248, 132, 191, 54, 23, 61, 224, 240, 198, 216, 127, 16, 32, 230, 129, 56, 184, 194, 36, 56, 180, 128, 78, 156, 130, 16, 122, 137, 225, 224, 198, 8, 24, 167, 36, 118, 193, 1, 0, 187, 44, 171, 79, 44, 128, 112, 112, 230, 7, 14, 165, 252, 252, 54, 74, 229, 253, 159, 10, 74, 14, 94, 99, 18, 35, 249, 121, 112, 8, 133, 7, 240, 182, 193, 102, 103, 28, 188, 21, 0, 224, 80, 81, 163, 93, 26, 10, 0, 150, 24, 187, 145, 1, 0, 10, 0, 252, 3, 136, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 208, 247, 255, 255, 255, 82, 216, 135, 121, 37, 120, 253, 255, 255, 255, 246, 153, 129, 69, 36, 207, 249, 255, 255, 255, 32, 39, 216, 113, 37, 36, 0, 0, 0, 0, 232, 139, 254, 66, 36, 31, 245, 255, 255, 255, 148, 43, 55, 106, 37, 49, 253, 255, 255, 255, 184, 50, 201, 67, 36, 145, 254, 255, 255, 255, 87, 219, 140, 91, 36, 139, 1, 0, 0, 0, 249, 64, 53, 66, 36, 174, 252, 255, 255, 255, 70, 123, 53, 75, 37, 144, 252, 255, 255, 255, 68, 201, 220, 94, 36, 57, 0, 0, 0, 0, 71, 165, 205, 124, 37, 203, 0, 0, 0, 0, 20, 42, 69, 110, 38, 51, 3, 0, 0, 0, 201, 56, 220, 70, 36, 212, 251, 255, 255, 255, 99, 180, 110, 92, 36, 121, 247, 255, 255, 255, 119, 38, 234, 83, 37, 222, 7, 0, 0, 0, 112, 249, 3, 97, 37, 208, 11, 92, 1, 12, 0, 46, 38, 133, 48, 175, 15, 28, 253, 0, 208, 207, 179, 17, 105, 16, 210, 4, 3, 16, 9, 67, 253, 58, 169, 39, 179, 75, 253, 51, 8, 91, 104, 44, 21, 38, 0, 160, 197, 24, 114, 7, 102, 20, 132, 1, 0, 4, 175, 72, 17, 71, 99, 181, 157, 17, 2, 7, 94, 3, 15, 6, 247, 0, 176, 3, 22, 156, 211, 81, 67, 83, 4, 128, 18, 101, 65, 149, 23, 26, 137, 187, 73, 29, 131, 21, 3, 47, 8, 8, 0, 16, 177, 19, 61, 178, 23, 119, 61, 9, 0, 5, 61, 131, 54, 7, 36, 163, 22, 18, 67, 55, 23, 9, 79, 13, 4, 0, 176, 128, 20, 228, 177, 85, 117, 151, 3, 0, 8, 253, 34, 62, 29, 27, 127, 71, 119, 51, 33, 7, 173, 51, 137, 85, 0, 224, 60, 85, 230, 209, 208, 18, 168, 10, 0, 88, 63, 7, 75, 44, 3, 3, 5, 47, 12, 4, 38, 174, 65, 57, 245, 0, 32, 211, 145, 11, 133, 49, 209, 79, 1, 0, 204, 93, 42, 109, 111, 69, 253, 28, 48, 42, 4, 60, 45, 128, 21, 81, 0, 128, 144, 221, 81, 4, 181, 208, 214, 248, 255, 219, 31, 77, 122, 253, 24, 45, 29, 255, 191, 98, 183, 17, 2, 192, 223, 143, 240, 255, 255, 255, 255, 15, 0, 0, 16, 73, 44, 3, 3, 20, 0, 225, 0, 16, 37, 144, 21, 17, 82, 59, 247, 4, 0, 91, 218, 104, 21, 25, 96, 147, 59, 141, 7, 63, 38, 35, 5, 16, 75, 0, 208, 35, 244, 212, 214, 208, 8, 66, 4, 0, 153, 38, 101, 191, 65, 231, 30, 143, 215, 97, 161, 62, 253, 133, 1, 83, 0, 176, 169, 57, 84, 208, 210, 185, 172, 3, 0, 4, 143, 15, 39, 6, 3, 5, 195, 23, 35, 40, 29, 148, 253, 27, 170, 0, 144, 65, 67, 211, 244, 227, 52, 51, 9, 0, 49, 43, 147, 79, 57, 34, 23, 149, 52, 8, 6, 129, 1, 177, 71, 19, 2, 16, 167, 201, 31, 88, 149, 16, 188, 9, 0, 137, 171, 37, 173, 151, 8, 67, 99, 106, 0, 14, 47, 99, 49, 35, 7, 0, 112, 7, 84, 132, 53, 176, 249, 26, 0, 0, 115, 66, 1, 45, 21, 49, 50, 6, 182, 253, 223, 71, 127, 31, 113, 253, 8, 48, 18, 107, 118, 218, 211, 111, 64, 0, 0, 38, 13, 68, 71, 173, 57, 22, 109, 0, 32, 3, 218, 101, 112, 176, 63, 183, 119, 204, 113, 54, 0, 192, 249, 7, 152, 197, 255, 186, 2, 0, 0, 0, 245, 211, 157, 97, 39, 181, 7, 0, 0, 0, 245, 211, 157, 97, 39, 103, 251, 255, 255, 255, 245, 211, 157, 97, 39, 224, 250, 255, 255, 255, 245, 211, 157, 97, 39, 0, 0, 0, 0, 0, 0, 0, 0, 152, 25, 84, 1, 236, 98, 0, 240, 252, 255, 82, 226, 39, 130, 232, 119, 76, 62, 0, 0, 28, 80, 241, 81, 23, 6, 240, 28, 3, 177, 228, 205, 116, 233, 212, 72, 203, 255, 103, 82, 65, 204, 147, 139, 253, 255, 207, 126, 72, 97, 50, 253, 3, 42, 3, 64, 206, 85, 3, 1, 192, 50, 95, 149, 205, 18, 100, 186, 255, 95, 109, 62, 181, 175, 79, 128, 64, 229, 255, 93, 110, 99, 159, 36, 255, 1, 0, 150, 98, 234, 2, 0, 192, 104, 177, 200, 240, 148, 64, 84, 240, 127, 20, 120, 125, 200, 20, 7, 144, 255, 87, 212, 85, 9, 135, 208, 255, 15, 0, 222, 10, 69, 202, 0, 16, 110, 114, 37, 171, 249, 77, 155, 42, 128, 15, 147, 57, 86, 203, 103, 70, 32, 255, 95, 133, 54, 240, 139, 157, 210, 255, 63, 192, 116, 1, 128, 111, 134, 133, 242, 158, 90, 66, 211, 10, 0, 208, 53, 70, 182, 192, 193, 166, 183, 201, 254, 63, 149, 50, 174, 91, 155, 70, 192, 255, 51, 120, 217, 92, 49, 92, 246, 15, 16, 208, 43, 33, 0, 168, 219, 52, 210, 178, 244, 1, 169, 170, 15, 225, 191, 180, 138, 57, 249, 115, 66, 229, 255, 31, 82, 122, 109, 10, 153, 255, 7, 128, 197, 7, 128, 7, 173, 166, 124, 33, 120, 16, 89, 69, 34, 194, 55, 66, 62, 216, 238, 236, 107, 255, 15, 131, 54, 198, 216, 107, 255, 255, 1, 44, 5, 0, 112, 46, 0, 117, 170, 71, 81, 246, 196, 1, 32, 155, 119, 157, 137, 173, 245, 33, 103, 45, 83, 122, 255, 191, 185, 150, 99, 182, 65, 24, 255, 63, 254, 171, 160, 240, 254, 15, 0, 160, 187, 77, 213, 13, 1, 151, 243, 169, 1, 16, 124, 77, 9, 255, 156, 137, 72, 138, 124, 254, 95, 45, 109, 192, 84, 80, 255, 63, 0, 40, 11, 36, 123, 0, 64, 177, 59, 193, 17, 162, 55, 19, 109, 13, 224, 115, 72, 28, 57, 75, 74, 3, 109, 243, 255, 203, 163, 112, 156, 16, 231, 253, 127, 238, 53, 223, 105, 30, 224, 168, 0, 160, 79, 90, 175, 3, 99, 147, 91, 215, 14, 0, 192, 224, 146, 32, 202, 198, 171, 246, 255, 155, 156, 134, 138, 23, 176, 124, 252, 63, 219, 18, 172, 0, 208, 63, 0, 128, 41, 25, 250, 1, 0, 98, 178, 205, 168, 47, 223, 213, 167, 4, 255, 252, 135, 61, 126, 198, 155, 56, 255, 111, 241, 84, 225, 198, 246, 255, 0, 240, 78, 213, 133, 4, 0, 158, 154, 57, 210, 165, 165, 4, 248, 255, 224, 129, 157, 55, 3, 246, 63, 12, 46, 151, 40, 164, 255, 103, 77, 67, 147, 245, 146, 248, 255, 31, 96, 157, 8, 32, 158, 210, 226, 99, 37, 160, 250, 1, 0, 124, 70, 58, 167, 240, 212, 85, 86, 186, 158, 252, 255, 12, 93, 246, 206, 184, 244, 255, 225, 172, 119, 115, 206, 255, 0, 0, 179, 149, 232, 61, 0, 208, 121, 44, 240, 213, 77, 44, 44, 155, 194, 127, 102, 179, 152, 74, 192, 79, 255, 127, 82, 177, 131, 104, 21, 90, 254, 255, 167, 12, 89, 232, 164, 50, 64, 8, 31, 0, 44, 149, 9, 240, 222, 33, 27, 156, 1, 136, 235, 190, 255, 175, 188, 98, 199, 180, 18, 251, 255, 64, 191, 112, 118, 120, 0, 248, 7, 128, 1, 233, 196, 80, 204, 162, 128, 240, 30, 7, 128, 78, 232, 129, 80, 110, 194, 114, 92, 166, 219, 255, 159, 96, 155, 209, 75, 57, 63, 255, 31, 7, 192, 99, 116, 103, 218, 127, 0, 128, 70, 130, 0, 176, 139, 35, 170, 69, 136, 76, 170, 204, 199, 186, 224, 191, 80, 130, 36, 27, 52, 254, 255, 52, 204, 213, 247, 205, 77, 254, 63, 0, 28, 39, 0, 20, 120, 175, 240, 11, 251, 38, 170, 198, 242, 63, 4, 121, 104, 138, 213, 69, 76, 30, 246, 255, 203, 96, 50, 89, 48, 248, 255, 31, 160, 77, 0, 0, 146, 218, 0, 176, 214, 49, 229, 251, 95, 89, 26, 209, 95, 146, 164, 49, 227, 53, 113, 22, 241, 255, 215, 22, 68, 130, 184, 90, 255, 255, 244, 39, 176, 133, 219, 241, 15, 0, 64, 236, 0, 144, 214, 233, 60, 179, 66, 18, 194, 197, 153, 29, 252, 43, 175, 22, 56, 28, 245, 255, 81, 35, 189, 109, 20, 232, 255, 1, 160, 123, 147, 69, 40, 0, 84, 14, 110, 36, 177, 67, 89, 1, 252, 229, 45, 9, 196, 122, 247, 246, 28, 255, 255, 224, 75, 119, 4, 64, 255, 255, 223, 88, 37, 139, 16, 213, 121, 128, 4, 5, 0, 245, 102, 0, 40, 98, 69, 37, 37, 200, 133, 56, 250, 255, 223, 224, 129, 233, 0, 237, 143, 254, 255, 10, 158, 110, 31, 44, 223, 255, 96, 26, 0, 64, 154, 21, 0, 210, 68, 140, 249, 122, 147, 54, 35, 31, 132, 255, 48, 66, 101, 238, 138, 100, 44, 254, 31, 150, 133, 37, 230, 247, 182, 251, 255, 85, 57, 40, 14, 243, 168, 121, 0, 48, 58, 0, 96, 146, 13, 224, 205, 220, 180, 163, 33, 86, 102, 121, 253, 255, 81, 32, 130, 128, 178, 84, 230, 255, 27, 109, 255, 100, 30, 160, 252, 8, 0, 160, 118, 160, 2, 0, 0, 18, 148, 173, 211, 203, 81, 145, 183, 254, 49, 0, 64, 1, 128, 255, 127, 241, 128, 255, 255, 255, 255, 255, 255, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3552 } };
const TfArray<1, int> tensor_dimension3 = { 1, { 1536 } };
const TfArray<1, int> tensor_dimension4 = { 1, { 1536 } };
const TfArray<2, int> tensor_dimension5 = { 2, { 1,650 } };
const TfArray<1, float> quant5_scale = { 1, { 0.051815047860145569, } };
const TfArray<1, int> quant5_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
uint8_t ALIGN(4) opdata0[3] = { 1, 4, 1,  }; /* custom_initial_data */
const TfArray<5, int> inputs0 = { 5, { 1,2,3,4,5 } };
const TfArray<1, int> outputs0 = { 1, { 0 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteUInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 3172, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteUInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 3552, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteUInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension3, 1536, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteUInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension4, 1536, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 880, (TfLiteIntArray*)&tensor_dimension5, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_ETHOSU, 3, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 6;
  for(size_t i = 0; i < 6; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_ETHOSU] = *Register_ETHOSU();

  for(size_t i = 0; i < 1; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nodeData[i].builtin_data;
      tflNodes[i].custom_initial_data_size = nodeData[i].custom_initial_data_size;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 1; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  5, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 1; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}

#elif EI_CONFIG_ETHOS_U55_128
/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 19.04.2022 13:54:17

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace tflite {
namespace ops {
namespace micro {
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 1648;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_ETHOSU,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[6];
TfLiteEvalTensor tflEvalTensors[6];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[1];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,4 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) uint8_t tensor_data1[3172] = { 67, 79, 80, 49, 1, 0, 16, 0, 7, 24, 0, 0, 0, 0, 6, 16, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 2, 0, 17, 3, 48, 1, 0, 0, 48, 64, 0, 0, 192, 5, 0, 0, 49, 1, 1, 0, 49, 64, 0, 0, 144, 1, 0, 0, 50, 64, 0, 0, 224, 1, 0, 0, 16, 0, 0, 0, 15, 1, 1, 0, 0, 64, 0, 0, 112, 3, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 0, 0, 3, 64, 0, 0, 0, 0, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 10, 1, 49, 0, 4, 1, 12, 0, 6, 64, 0, 0, 1, 0, 0, 0, 5, 64, 0, 0, 138, 2, 0, 0, 4, 64, 0, 0, 13, 0, 0, 0, 9, 1, 7, 0, 5, 1, 1, 0, 7, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 3, 1, 0, 0, 2, 1, 1, 0, 31, 1, 1, 0, 16, 64, 0, 0, 0, 0, 0, 0, 17, 64, 0, 0, 0, 0, 0, 0, 18, 64, 0, 0, 0, 0, 0, 0, 19, 64, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 28, 1, 0, 0, 26, 1, 49, 0, 18, 1, 0, 0, 17, 1, 49, 0, 19, 1, 7, 0, 22, 64, 0, 0, 1, 0, 0, 0, 21, 64, 0, 0, 144, 1, 0, 0, 20, 64, 0, 0, 8, 0, 0, 0, 24, 1, 128, 255, 20, 1, 1, 0, 33, 1, 0, 0, 32, 1, 2, 0, 34, 1, 4, 0, 40, 1, 1, 0, 32, 64, 0, 0, 224, 1, 0, 0, 33, 64, 0, 0, 144, 1, 0, 0, 41, 1, 1, 0, 34, 64, 0, 0, 144, 1, 0, 0, 35, 64, 0, 0, 80, 0, 0, 0, 37, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 22, 1, 0, 0, 21, 1, 49, 0, 23, 1, 7, 0, 13, 1, 6, 0, 45, 1, 14, 0, 36, 1, 0, 0, 47, 1, 0, 0, 17, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 11, 1, 49, 0, 12, 1, 49, 0, 10, 1, 0, 0, 4, 1, 7, 0, 5, 64, 0, 0, 8, 0, 0, 0, 4, 64, 0, 0, 8, 0, 0, 0, 9, 1, 128, 255, 1, 1, 0, 0, 2, 1, 0, 0, 16, 64, 0, 0, 144, 1, 0, 0, 27, 1, 24, 0, 28, 1, 24, 0, 26, 1, 0, 0, 18, 1, 24, 0, 17, 1, 0, 0, 21, 64, 0, 0, 8, 0, 0, 0, 33, 1, 1, 0, 32, 1, 0, 0, 34, 1, 2, 0, 22, 1, 6, 0, 21, 1, 1, 0, 5, 0, 0, 0, 48, 64, 0, 0, 160, 7, 0, 0, 49, 64, 0, 0, 96, 2, 0, 0, 50, 64, 0, 0, 96, 2, 0, 0, 18, 0, 1, 0, 16, 0, 0, 0, 0, 64, 0, 0, 144, 1, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 10, 1, 24, 0, 5, 64, 0, 0, 200, 0, 0, 0, 1, 1, 1, 0, 2, 1, 1, 0, 16, 64, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 28, 1, 0, 0, 26, 1, 24, 0, 18, 1, 0, 0, 17, 1, 24, 0, 19, 1, 15, 0, 21, 64, 0, 0, 144, 1, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 33, 1, 0, 0, 32, 1, 2, 0, 34, 1, 4, 0, 32, 64, 0, 0, 0, 3, 0, 0, 33, 64, 0, 0, 192, 1, 0, 0, 34, 64, 0, 0, 96, 2, 0, 0, 35, 64, 0, 0, 160, 0, 0, 0, 22, 1, 0, 0, 21, 1, 25, 0, 23, 1, 15, 0, 17, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 11, 1, 24, 0, 12, 1, 24, 0, 10, 1, 0, 0, 4, 1, 15, 0, 5, 64, 0, 0, 16, 0, 0, 0, 4, 64, 0, 0, 16, 0, 0, 0, 1, 1, 0, 0, 3, 1, 1, 0, 2, 1, 0, 0, 16, 64, 0, 0, 144, 1, 0, 0, 27, 1, 12, 0, 28, 1, 12, 0, 26, 1, 0, 0, 18, 1, 12, 0, 17, 1, 0, 0, 21, 64, 0, 0, 16, 0, 0, 0, 33, 1, 1, 0, 32, 1, 0, 0, 34, 1, 2, 0, 22, 1, 3, 0, 21, 1, 1, 0, 5, 0, 0, 0, 0, 64, 0, 0, 144, 1, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 4, 1, 207, 0, 5, 64, 0, 0, 208, 0, 0, 0, 4, 64, 0, 0, 208, 0, 0, 0, 3, 1, 0, 0, 16, 64, 0, 0, 64, 0, 0, 0, 27, 1, 0, 0, 28, 1, 0, 0, 18, 1, 0, 0, 19, 1, 3, 0, 21, 64, 0, 0, 4, 0, 0, 0, 20, 64, 0, 0, 4, 0, 0, 0, 24, 1, 254, 255, 33, 1, 0, 0, 34, 1, 0, 0, 40, 1, 0, 0, 32, 64, 0, 0, 48, 10, 0, 0, 33, 64, 0, 0, 176, 3, 0, 0, 41, 1, 0, 0, 34, 64, 0, 0, 0, 10, 0, 0, 35, 64, 0, 0, 48, 0, 0, 0, 22, 1, 0, 0, 23, 1, 7, 0, 47, 1, 3, 0, 2, 0, 0, 0, 0, 64, 0, 0, 64, 0, 0, 0, 10, 1, 3, 0, 4, 1, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 1, 0, 0, 0, 9, 1, 254, 255, 16, 64, 0, 0, 80, 0, 0, 0, 19, 1, 0, 0, 22, 64, 0, 0, 16, 0, 0, 0, 21, 64, 0, 0, 16, 0, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 20, 1, 65, 0, 32, 1, 3, 0, 47, 1, 0, 0, 5, 0, 0, 0, 48, 64, 0, 0, 32, 1, 0, 0, 49, 1, 3, 1, 49, 64, 0, 0, 0, 88, 0, 0, 50, 64, 0, 0, 0, 4, 0, 0, 16, 0, 0, 0, 37, 64, 0, 0, 1, 0, 0, 0, 38, 64, 0, 0, 1, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 10, 1, 0, 0, 4, 1, 3, 0, 4, 64, 0, 0, 4, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 19, 1, 3, 0, 22, 64, 0, 0, 64, 0, 0, 0, 21, 64, 0, 0, 64, 0, 0, 0, 20, 64, 0, 0, 64, 0, 0, 0, 24, 1, 127, 0, 20, 1, 69, 1, 37, 1, 16, 48, 13, 1, 22, 0, 45, 1, 22, 0, 141, 1, 6, 0, 143, 1, 1, 0, 128, 64, 0, 0, 80, 0, 0, 0, 129, 64, 0, 0, 0, 0, 0, 0, 130, 64, 0, 0, 0, 0, 0, 0, 131, 64, 0, 0, 0, 0, 0, 0, 139, 1, 0, 0, 140, 1, 0, 0, 138, 1, 0, 0, 134, 64, 0, 0, 16, 0, 0, 0, 133, 64, 0, 0, 16, 0, 0, 0, 132, 64, 0, 0, 16, 0, 0, 0, 137, 1, 254, 255, 133, 1, 65, 0, 128, 1, 4, 0, 17, 0, 0, 0, 6, 0, 2, 0, 0, 64, 0, 0, 0, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 9, 1, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 64, 0, 0, 0, 22, 64, 0, 0, 4, 0, 0, 0, 21, 64, 0, 0, 16, 0, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 24, 1, 254, 255, 20, 1, 5, 128, 37, 1, 0, 0, 38, 1, 126, 255, 39, 1, 125, 0, 141, 1, 10, 0, 143, 1, 0, 0, 128, 64, 0, 0, 32, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 137, 1, 0, 0, 133, 1, 9, 0, 6, 0, 8, 0, 0, 64, 0, 0, 64, 0, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 16, 0, 0, 0, 4, 64, 0, 0, 16, 0, 0, 0, 5, 1, 9, 0, 16, 64, 0, 0, 192, 0, 0, 0, 19, 1, 0, 0, 22, 64, 0, 0, 64, 0, 0, 0, 21, 64, 0, 0, 64, 0, 0, 0, 20, 64, 0, 0, 64, 0, 0, 0, 20, 1, 69, 1, 32, 1, 0, 0, 13, 1, 10, 0, 45, 1, 14, 0, 5, 0, 2, 0, 0, 64, 0, 0, 192, 0, 0, 0, 4, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 0, 1, 0, 0, 20, 1, 69, 0, 13, 1, 22, 0, 45, 1, 22, 0, 6, 0, 7, 0, 15, 1, 0, 0, 0, 64, 0, 0, 48, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 16, 64, 0, 0, 64, 0, 0, 0, 20, 1, 69, 1, 143, 1, 1, 0, 128, 64, 0, 0, 0, 1, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 128, 1, 0, 0, 6, 0, 2, 0, 15, 1, 1, 0, 0, 64, 0, 0, 0, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 128, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 64, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 47, 1, 3, 0, 6, 0, 2, 0, 0, 64, 0, 0, 192, 0, 0, 0, 20, 1, 69, 0, 143, 1, 1, 0, 128, 64, 0, 0, 128, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 47, 1, 0, 0, 6, 0, 9, 0, 0, 64, 0, 0, 128, 0, 0, 0, 20, 1, 69, 1, 143, 1, 0, 0, 128, 64, 0, 0, 80, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 2, 0, 20, 1, 69, 0, 128, 64, 0, 0, 64, 5, 0, 0, 6, 0, 9, 0, 36, 64, 1, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 96, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 24, 1, 0, 0, 20, 1, 69, 1, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 128, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 128, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 0, 1, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 112, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 128, 64, 0, 0, 128, 5, 0, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 16, 64, 0, 0, 192, 0, 0, 0, 143, 1, 1, 0, 128, 64, 0, 0, 128, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 144, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 192, 0, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 0, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 192, 0, 0, 0, 24, 1, 254, 255, 38, 1, 126, 255, 39, 1, 125, 0, 143, 1, 0, 0, 128, 64, 0, 0, 160, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 24, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 192, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 192, 0, 0, 0, 16, 64, 0, 0, 0, 1, 0, 0, 128, 64, 0, 0, 128, 0, 0, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 144, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 0, 1, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 192, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 24, 1, 254, 255, 38, 1, 126, 255, 39, 1, 125, 0, 143, 1, 0, 0, 128, 64, 0, 0, 160, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 192, 0, 0, 0, 24, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 0, 1, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 1, 0, 0, 16, 64, 0, 0, 192, 0, 0, 0, 128, 64, 0, 0, 128, 0, 0, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 144, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 192, 0, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 0, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 192, 0, 0, 0, 24, 1, 254, 255, 38, 1, 126, 255, 39, 1, 125, 0, 143, 1, 0, 0, 128, 64, 0, 0, 160, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 24, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 143, 1, 1, 0, 128, 64, 0, 0, 192, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 0, 64, 0, 0, 192, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 176, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 16, 64, 0, 0, 128, 0, 0, 0, 19, 1, 3, 0, 143, 1, 1, 0, 128, 64, 0, 0, 192, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 128, 1, 4, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 128, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 22, 64, 0, 0, 1, 0, 0, 0, 21, 64, 0, 0, 4, 0, 0, 0, 20, 64, 0, 0, 4, 0, 0, 0, 24, 1, 128, 255, 20, 1, 1, 128, 128, 64, 0, 0, 64, 0, 0, 0, 6, 0, 8, 0, 0, 0, 255, 255, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3172 } };
const ALIGN(16) uint8_t tensor_data2[3552] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 21, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 26, 0, 0, 0, 28, 0, 0, 0, 31, 0, 0, 0, 33, 0, 0, 0, 36, 0, 0, 0, 39, 0, 0, 0, 42, 0, 0, 0, 45, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 56, 0, 0, 0, 61, 0, 0, 0, 66, 0, 0, 0, 71, 0, 0, 0, 76, 0, 0, 0, 83, 0, 0, 0, 89, 0, 0, 0, 96, 0, 0, 0, 104, 0, 0, 0, 112, 0, 0, 0, 121, 0, 0, 0, 130, 0, 0, 0, 141, 0, 0, 0, 152, 0, 0, 0, 164, 0, 0, 0, 177, 0, 0, 0, 191, 0, 0, 0, 206, 0, 0, 0, 222, 0, 0, 0, 240, 0, 0, 0, 3, 1, 0, 0, 23, 1, 0, 0, 45, 1, 0, 0, 69, 1, 0, 0, 95, 1, 0, 0, 123, 1, 0, 0, 153, 1, 0, 0, 185, 1, 0, 0, 220, 1, 0, 0, 2, 2, 0, 0, 42, 2, 0, 0, 86, 2, 0, 0, 133, 2, 0, 0, 185, 2, 0, 0, 240, 2, 0, 0, 43, 3, 0, 0, 108, 3, 0, 0, 177, 3, 0, 0, 252, 3, 0, 0, 77, 4, 0, 0, 164, 4, 0, 0, 2, 5, 0, 0, 103, 5, 0, 0, 213, 5, 0, 0, 75, 6, 0, 0, 203, 6, 0, 0, 85, 7, 0, 0, 233, 7, 0, 0, 138, 8, 0, 0, 55, 9, 0, 0, 242, 9, 0, 0, 187, 10, 0, 0, 149, 11, 0, 0, 128, 12, 0, 0, 125, 13, 0, 0, 143, 14, 0, 0, 182, 15, 0, 0, 244, 16, 0, 0, 76, 18, 0, 0, 191, 19, 0, 0, 80, 21, 0, 0, 0, 23, 0, 0, 210, 24, 0, 0, 202, 26, 0, 0, 233, 28, 0, 0, 51, 31, 0, 0, 172, 33, 0, 0, 87, 36, 0, 0, 55, 39, 0, 0, 83, 42, 0, 0, 173, 45, 0, 0, 75, 49, 0, 0, 51, 53, 0, 0, 106, 57, 0, 0, 246, 61, 0, 0, 222, 66, 0, 0, 42, 72, 0, 0, 226, 77, 0, 0, 13, 84, 0, 0, 181, 90, 0, 0, 229, 97, 0, 0, 166, 105, 0, 0, 4, 114, 0, 0, 12, 123, 0, 0, 204, 132, 0, 0, 80, 143, 0, 0, 171, 154, 0, 0, 235, 166, 0, 0, 36, 180, 0, 0, 105, 194, 0, 0, 207, 209, 0, 0, 110, 226, 0, 0, 93, 244, 0, 0, 185, 7, 1, 0, 157, 28, 1, 0, 40, 51, 1, 0, 125, 75, 1, 0, 191, 101, 1, 0, 21, 130, 1, 0, 170, 160, 1, 0, 172, 193, 1, 0, 74, 229, 1, 0, 187, 11, 2, 0, 55, 53, 2, 0, 253, 97, 2, 0, 79, 146, 2, 0, 116, 198, 2, 0, 187, 254, 2, 0, 119, 59, 3, 0, 3, 125, 3, 0, 192, 195, 3, 0, 23, 16, 4, 0, 122, 98, 4, 0, 100, 187, 4, 0, 89, 27, 5, 0, 232, 130, 5, 0, 171, 242, 5, 0, 72, 107, 6, 0, 115, 237, 6, 0, 238, 121, 7, 0, 138, 17, 8, 0, 39, 181, 8, 0, 187, 101, 9, 0, 75, 36, 10, 0, 244, 241, 10, 0, 230, 207, 11, 0, 110, 191, 12, 0, 239, 193, 13, 0, 235, 216, 14, 0, 255, 5, 16, 0, 237, 74, 17, 0, 152, 169, 18, 0, 10, 36, 20, 0, 118, 188, 21, 0, 60, 117, 23, 0, 237, 80, 25, 0, 75, 82, 27, 0, 84, 124, 29, 0, 64, 210, 31, 0, 137, 87, 34, 0, 239, 15, 37, 0, 127, 255, 39, 0, 152, 42, 43, 0, 240, 149, 46, 0, 159, 70, 50, 0, 34, 66, 54, 0, 103, 142, 58, 0, 212, 49, 63, 0, 81, 51, 68, 0, 80, 154, 73, 0, 219, 110, 79, 0, 162, 185, 85, 0, 0, 132, 92, 0, 17, 216, 99, 0, 190, 192, 107, 0, 204, 73, 116, 0, 239, 127, 125, 0, 223, 112, 135, 0, 100, 43, 146, 0, 120, 191, 157, 0, 87, 62, 170, 0, 156, 186, 183, 0, 86, 72, 198, 0, 47, 253, 213, 0, 138, 240, 230, 0, 159, 59, 249, 0, 169, 249, 12, 1, 13, 72, 34, 1, 124, 70, 57, 1, 52, 23, 82, 1, 41, 223, 108, 1, 37, 198, 137, 1, 63, 247, 168, 1, 219, 160, 202, 1, 29, 245, 238, 1, 12, 42, 22, 2, 9, 122, 64, 2, 16, 36, 110, 2, 18, 108, 159, 2, 109, 155, 212, 2, 83, 1, 14, 3, 24, 243, 75, 3, 8, 205, 142, 3, 143, 242, 214, 3, 51, 207, 36, 4, 178, 214, 120, 4, 41, 134, 211, 4, 160, 100, 53, 5, 174, 3, 159, 5, 143, 0, 17, 6, 252, 4, 140, 6, 234, 199, 16, 7, 19, 15, 160, 7, 204, 175, 58, 8, 226, 143, 225, 8, 12, 168, 149, 9, 43, 4, 88, 10, 193, 197, 41, 11, 197, 36, 12, 12, 48, 114, 0, 13, 202, 25, 8, 14, 191, 163, 36, 15, 190, 183, 87, 16, 241, 30, 163, 17, 41, 198, 8, 19, 38, 194, 138, 20, 1, 81, 43, 22, 147, 223, 236, 23, 34, 10, 210, 25, 236, 162, 221, 27, 196, 181, 18, 30, 33, 139, 116, 32, 244, 174, 6, 35, 10, 245, 204, 37, 246, 125, 203, 40, 25, 191, 6, 44, 77, 136, 131, 47, 114, 8, 71, 51, 135, 219, 86, 55, 250, 11, 185, 59, 213, 33, 116, 64, 213, 37, 143, 69, 220, 177, 17, 75, 30, 250, 3, 81, 62, 215, 110, 87, 6, 215, 91, 94, 92, 73, 213, 101, 155, 75, 230, 109, 198, 225, 154, 118, 255, 255, 255, 127, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 195, 195, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 90, 90, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 118, 54, 140, 85, 37, 69, 228, 255, 255, 255, 3, 21, 119, 67, 38, 36, 226, 255, 255, 255, 63, 191, 138, 74, 38, 230, 252, 255, 255, 255, 148, 46, 62, 102, 37, 72, 234, 255, 255, 255, 23, 14, 91, 82, 38, 206, 241, 255, 255, 255, 128, 90, 131, 80, 38, 63, 229, 255, 255, 255, 245, 220, 232, 124, 39, 181, 250, 255, 255, 255, 67, 170, 208, 71, 37, 152, 9, 84, 241, 93, 48, 144, 96, 48, 33, 1, 129, 32, 48, 18, 116, 81, 65, 241, 176, 240, 239, 143, 101, 51, 115, 66, 18, 2, 162, 145, 17, 225, 208, 192, 64, 0, 224, 0, 176, 251, 249, 14, 21, 0, 152, 133, 30, 244, 186, 2, 192, 255, 204, 84, 124, 247, 238, 205, 243, 129, 139, 18, 245, 62, 0, 32, 22, 104, 145, 183, 231, 152, 109, 251, 231, 23, 4, 168, 31, 177, 198, 203, 214, 199, 214, 37, 176, 234, 212, 0, 240, 143, 2, 202, 137, 187, 194, 23, 40, 233, 14, 132, 0, 240, 181, 185, 173, 80, 182, 7, 16, 254, 178, 66, 239, 16, 72, 124, 178, 234, 31, 82, 125, 122, 206, 0, 0, 167, 84, 87, 167, 242, 253, 253, 236, 178, 117, 159, 222, 141, 101, 0, 240, 152, 198, 174, 215, 174, 142, 189, 225, 74, 1, 207, 21, 0, 254, 244, 98, 219, 164, 57, 3, 197, 34, 182, 26, 0, 34, 142, 38, 164, 36, 114, 31, 225, 206, 15, 0, 208, 183, 33, 41, 94, 149, 216, 222, 55, 141, 105, 180, 67, 185, 5, 0, 154, 170, 96, 23, 120, 14, 0, 95, 8, 24, 224, 88, 23, 243, 194, 125, 238, 191, 233, 229, 167, 1, 64, 53, 120, 213, 44, 249, 247, 245, 141, 136, 72, 221, 247, 222, 3, 128, 125, 222, 121, 52, 9, 61, 96, 161, 85, 20, 254, 95, 217, 2, 210, 154, 8, 253, 255, 23, 114, 242, 229, 172, 51, 33, 255, 255, 255, 255, 255, 224, 224, 240, 225, 163, 104, 233, 224, 31, 83, 138, 64, 8, 28, 28, 42, 48, 218, 74, 100, 105, 46, 16, 58, 248, 132, 191, 54, 23, 61, 224, 240, 198, 216, 127, 16, 32, 230, 129, 56, 184, 194, 36, 56, 180, 128, 78, 156, 130, 16, 122, 137, 225, 224, 198, 8, 24, 167, 36, 118, 193, 1, 0, 187, 44, 171, 79, 44, 128, 112, 112, 230, 7, 14, 165, 252, 252, 54, 74, 229, 253, 159, 10, 74, 14, 94, 99, 18, 35, 249, 121, 112, 8, 133, 7, 240, 182, 193, 102, 103, 28, 188, 21, 0, 224, 80, 81, 163, 93, 26, 10, 0, 150, 24, 187, 145, 1, 0, 10, 0, 252, 3, 136, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 208, 247, 255, 255, 255, 82, 216, 135, 121, 37, 120, 253, 255, 255, 255, 246, 153, 129, 69, 36, 207, 249, 255, 255, 255, 32, 39, 216, 113, 37, 36, 0, 0, 0, 0, 232, 139, 254, 66, 36, 31, 245, 255, 255, 255, 148, 43, 55, 106, 37, 49, 253, 255, 255, 255, 184, 50, 201, 67, 36, 145, 254, 255, 255, 255, 87, 219, 140, 91, 36, 139, 1, 0, 0, 0, 249, 64, 53, 66, 36, 174, 252, 255, 255, 255, 70, 123, 53, 75, 37, 144, 252, 255, 255, 255, 68, 201, 220, 94, 36, 57, 0, 0, 0, 0, 71, 165, 205, 124, 37, 203, 0, 0, 0, 0, 20, 42, 69, 110, 38, 51, 3, 0, 0, 0, 201, 56, 220, 70, 36, 212, 251, 255, 255, 255, 99, 180, 110, 92, 36, 121, 247, 255, 255, 255, 119, 38, 234, 83, 37, 222, 7, 0, 0, 0, 112, 249, 3, 97, 37, 208, 11, 92, 1, 12, 0, 46, 38, 133, 48, 175, 15, 28, 253, 0, 208, 207, 179, 17, 105, 16, 210, 4, 3, 16, 9, 67, 253, 58, 169, 39, 179, 75, 253, 51, 8, 91, 104, 44, 21, 38, 0, 160, 197, 24, 114, 7, 102, 20, 132, 1, 0, 4, 175, 72, 17, 71, 99, 181, 157, 17, 2, 7, 94, 3, 15, 6, 247, 0, 176, 3, 22, 156, 211, 81, 67, 83, 4, 128, 18, 101, 65, 149, 23, 26, 137, 187, 73, 29, 131, 21, 3, 47, 8, 8, 0, 16, 177, 19, 61, 178, 23, 119, 61, 9, 0, 5, 61, 131, 54, 7, 36, 163, 22, 18, 67, 55, 23, 9, 79, 13, 4, 0, 176, 128, 20, 228, 177, 85, 117, 151, 3, 0, 8, 253, 34, 62, 29, 27, 127, 71, 119, 51, 33, 7, 173, 51, 137, 85, 0, 224, 60, 85, 230, 209, 208, 18, 168, 10, 0, 88, 63, 7, 75, 44, 3, 3, 5, 47, 12, 4, 38, 174, 65, 57, 245, 0, 32, 211, 145, 11, 133, 49, 209, 79, 1, 0, 204, 93, 42, 109, 111, 69, 253, 28, 48, 42, 4, 60, 45, 128, 21, 81, 0, 128, 144, 221, 81, 4, 181, 208, 214, 248, 255, 219, 31, 77, 122, 253, 24, 45, 29, 255, 191, 98, 183, 17, 2, 192, 223, 143, 240, 255, 255, 255, 255, 15, 0, 0, 16, 73, 44, 3, 3, 20, 0, 225, 0, 16, 37, 144, 21, 17, 82, 59, 247, 4, 0, 91, 218, 104, 21, 25, 96, 147, 59, 141, 7, 63, 38, 35, 5, 16, 75, 0, 208, 35, 244, 212, 214, 208, 8, 66, 4, 0, 153, 38, 101, 191, 65, 231, 30, 143, 215, 97, 161, 62, 253, 133, 1, 83, 0, 176, 169, 57, 84, 208, 210, 185, 172, 3, 0, 4, 143, 15, 39, 6, 3, 5, 195, 23, 35, 40, 29, 148, 253, 27, 170, 0, 144, 65, 67, 211, 244, 227, 52, 51, 9, 0, 49, 43, 147, 79, 57, 34, 23, 149, 52, 8, 6, 129, 1, 177, 71, 19, 2, 16, 167, 201, 31, 88, 149, 16, 188, 9, 0, 137, 171, 37, 173, 151, 8, 67, 99, 106, 0, 14, 47, 99, 49, 35, 7, 0, 112, 7, 84, 132, 53, 176, 249, 26, 0, 0, 115, 66, 1, 45, 21, 49, 50, 6, 182, 253, 223, 71, 127, 31, 113, 253, 8, 48, 18, 107, 118, 218, 211, 111, 64, 0, 0, 38, 13, 68, 71, 173, 57, 22, 109, 0, 32, 3, 218, 101, 112, 176, 63, 183, 119, 204, 113, 54, 0, 192, 249, 7, 152, 197, 255, 186, 2, 0, 0, 0, 245, 211, 157, 97, 39, 181, 7, 0, 0, 0, 245, 211, 157, 97, 39, 103, 251, 255, 255, 255, 245, 211, 157, 97, 39, 224, 250, 255, 255, 255, 245, 211, 157, 97, 39, 0, 0, 0, 0, 0, 0, 0, 0, 152, 25, 84, 1, 236, 98, 0, 240, 252, 255, 82, 226, 39, 130, 232, 119, 76, 62, 0, 0, 28, 80, 241, 81, 23, 6, 240, 28, 3, 177, 228, 205, 116, 233, 212, 72, 203, 255, 103, 82, 65, 204, 147, 139, 253, 255, 207, 126, 72, 97, 50, 253, 3, 42, 3, 64, 206, 85, 3, 1, 192, 50, 95, 149, 205, 18, 100, 186, 255, 95, 109, 62, 181, 175, 79, 128, 64, 229, 255, 93, 110, 99, 159, 36, 255, 1, 0, 150, 98, 234, 2, 0, 192, 104, 177, 200, 240, 148, 64, 84, 240, 127, 20, 120, 125, 200, 20, 7, 144, 255, 87, 212, 85, 9, 135, 208, 255, 15, 0, 222, 10, 69, 202, 0, 16, 110, 114, 37, 171, 249, 77, 155, 42, 128, 15, 147, 57, 86, 203, 103, 70, 32, 255, 95, 133, 54, 240, 139, 157, 210, 255, 63, 192, 116, 1, 128, 111, 134, 133, 242, 158, 90, 66, 211, 10, 0, 208, 53, 70, 182, 192, 193, 166, 183, 201, 254, 63, 149, 50, 174, 91, 155, 70, 192, 255, 51, 120, 217, 92, 49, 92, 246, 15, 16, 208, 43, 33, 0, 168, 219, 52, 210, 178, 244, 1, 169, 170, 15, 225, 191, 180, 138, 57, 249, 115, 66, 229, 255, 31, 82, 122, 109, 10, 153, 255, 7, 128, 197, 7, 128, 7, 173, 166, 124, 33, 120, 16, 89, 69, 34, 194, 55, 66, 62, 216, 238, 236, 107, 255, 15, 131, 54, 198, 216, 107, 255, 255, 1, 44, 5, 0, 112, 46, 0, 117, 170, 71, 81, 246, 196, 1, 32, 155, 119, 157, 137, 173, 245, 33, 103, 45, 83, 122, 255, 191, 185, 150, 99, 182, 65, 24, 255, 63, 254, 171, 160, 240, 254, 15, 0, 160, 187, 77, 213, 13, 1, 151, 243, 169, 1, 16, 124, 77, 9, 255, 156, 137, 72, 138, 124, 254, 95, 45, 109, 192, 84, 80, 255, 63, 0, 40, 11, 36, 123, 0, 64, 177, 59, 193, 17, 162, 55, 19, 109, 13, 224, 115, 72, 28, 57, 75, 74, 3, 109, 243, 255, 203, 163, 112, 156, 16, 231, 253, 127, 238, 53, 223, 105, 30, 224, 168, 0, 160, 79, 90, 175, 3, 99, 147, 91, 215, 14, 0, 192, 224, 146, 32, 202, 198, 171, 246, 255, 155, 156, 134, 138, 23, 176, 124, 252, 63, 219, 18, 172, 0, 208, 63, 0, 128, 41, 25, 250, 1, 0, 98, 178, 205, 168, 47, 223, 213, 167, 4, 255, 252, 135, 61, 126, 198, 155, 56, 255, 111, 241, 84, 225, 198, 246, 255, 0, 240, 78, 213, 133, 4, 0, 158, 154, 57, 210, 165, 165, 4, 248, 255, 224, 129, 157, 55, 3, 246, 63, 12, 46, 151, 40, 164, 255, 103, 77, 67, 147, 245, 146, 248, 255, 31, 96, 157, 8, 32, 158, 210, 226, 99, 37, 160, 250, 1, 0, 124, 70, 58, 167, 240, 212, 85, 86, 186, 158, 252, 255, 12, 93, 246, 206, 184, 244, 255, 225, 172, 119, 115, 206, 255, 0, 0, 179, 149, 232, 61, 0, 208, 121, 44, 240, 213, 77, 44, 44, 155, 194, 127, 102, 179, 152, 74, 192, 79, 255, 127, 82, 177, 131, 104, 21, 90, 254, 255, 167, 12, 89, 232, 164, 50, 64, 8, 31, 0, 44, 149, 9, 240, 222, 33, 27, 156, 1, 136, 235, 190, 255, 175, 188, 98, 199, 180, 18, 251, 255, 64, 191, 112, 118, 120, 0, 248, 7, 128, 1, 233, 196, 80, 204, 162, 128, 240, 30, 7, 128, 78, 232, 129, 80, 110, 194, 114, 92, 166, 219, 255, 159, 96, 155, 209, 75, 57, 63, 255, 31, 7, 192, 99, 116, 103, 218, 127, 0, 128, 70, 130, 0, 176, 139, 35, 170, 69, 136, 76, 170, 204, 199, 186, 224, 191, 80, 130, 36, 27, 52, 254, 255, 52, 204, 213, 247, 205, 77, 254, 63, 0, 28, 39, 0, 20, 120, 175, 240, 11, 251, 38, 170, 198, 242, 63, 4, 121, 104, 138, 213, 69, 76, 30, 246, 255, 203, 96, 50, 89, 48, 248, 255, 31, 160, 77, 0, 0, 146, 218, 0, 176, 214, 49, 229, 251, 95, 89, 26, 209, 95, 146, 164, 49, 227, 53, 113, 22, 241, 255, 215, 22, 68, 130, 184, 90, 255, 255, 244, 39, 176, 133, 219, 241, 15, 0, 64, 236, 0, 144, 214, 233, 60, 179, 66, 18, 194, 197, 153, 29, 252, 43, 175, 22, 56, 28, 245, 255, 81, 35, 189, 109, 20, 232, 255, 1, 160, 123, 147, 69, 40, 0, 84, 14, 110, 36, 177, 67, 89, 1, 252, 229, 45, 9, 196, 122, 247, 246, 28, 255, 255, 224, 75, 119, 4, 64, 255, 255, 223, 88, 37, 139, 16, 213, 121, 128, 4, 5, 0, 245, 102, 0, 40, 98, 69, 37, 37, 200, 133, 56, 250, 255, 223, 224, 129, 233, 0, 237, 143, 254, 255, 10, 158, 110, 31, 44, 223, 255, 96, 26, 0, 64, 154, 21, 0, 210, 68, 140, 249, 122, 147, 54, 35, 31, 132, 255, 48, 66, 101, 238, 138, 100, 44, 254, 31, 150, 133, 37, 230, 247, 182, 251, 255, 85, 57, 40, 14, 243, 168, 121, 0, 48, 58, 0, 96, 146, 13, 224, 205, 220, 180, 163, 33, 86, 102, 121, 253, 255, 81, 32, 130, 128, 178, 84, 230, 255, 27, 109, 255, 100, 30, 160, 252, 8, 0, 160, 118, 160, 2, 0, 0, 18, 148, 173, 211, 203, 81, 145, 183, 254, 49, 0, 64, 1, 128, 255, 127, 241, 128, 255, 255, 255, 255, 255, 255, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3552 } };
const TfArray<1, int> tensor_dimension3 = { 1, { 1536 } };
const TfArray<1, int> tensor_dimension4 = { 1, { 1536 } };
const TfArray<2, int> tensor_dimension5 = { 2, { 1,650 } };
const TfArray<1, float> quant5_scale = { 1, { 0.051815047860145569, } };
const TfArray<1, int> quant5_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
uint8_t ALIGN(4) opdata0[3] = { 1, 4, 1,  }; /* custom_initial_data */
const TfArray<5, int> inputs0 = { 5, { 1,2,3,4,5 } };
const TfArray<1, int> outputs0 = { 1, { 0 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteUInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 3172, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteUInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 3552, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteUInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension3, 1536, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteUInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension4, 1536, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 880, (TfLiteIntArray*)&tensor_dimension5, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_ETHOSU, 3, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 6;
  for(size_t i = 0; i < 6; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_ETHOSU] = *Register_ETHOSU();

  for(size_t i = 0; i < 1; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nodeData[i].builtin_data;
      tflNodes[i].custom_initial_data_size = nodeData[i].custom_initial_data_size;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 1; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  5, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 1; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
#else
#error "Please define a macro choosing a valid Ethos configuration (either EI_CONFIG_ETHOS_U55_256 or EI_CONFIG_ETHOS_U55_128)"
#endif
